<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Loop Optimization in Compiler</title>
      <link href="/2024/01/31/Loop-Optimization-in-Compiler/"/>
      <url>/2024/01/31/Loop-Optimization-in-Compiler/</url>
      
        <content type="html"><![CDATA[<h1 id="Loop-Optimization-in-Compiler"><a href="#Loop-Optimization-in-Compiler" class="headerlink" title="Loop Optimization in Compiler"></a>Loop Optimization in Compiler</h1><h2 id="3-归纳变量"><a href="#3-归纳变量" class="headerlink" title="3. 归纳变量"></a>3. 归纳变量</h2><p>直观来说，归纳变量说的是，如果循环中有一个以 $t$ 递增的变量 $i$，和一个等于 $i\cdot b + c$ 的变量 $j$。如果 $b, c$ 均为循环不变量，那么就可以用 $t\cdot b$ 来递增 $j$。</p><p>举个例子：考虑这么一段代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="built_in">getInt</span>(), b = <span class="built_in">getInt</span>(), c = <span class="built_in">getInt</span>(), d = <span class="built_in">getInt</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        j = <span class="number">4</span> * i + <span class="number">2</span>;</span><br><span class="line">        sum = sum + j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printlnInt</span>(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不经优化的话，我们会得到：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">define</span> dso_local <span class="type">i32</span> <span class="title">@main</span>() &#123;</span><br><span class="line"></span><br><span class="line">enter_main_<span class="number">0</span>:</span><br><span class="line"><span class="variable">%_1</span> <span class="operator">=</span> <span class="keyword">call</span> <span class="type">i32</span> <span class="title">@getInt</span>()</span><br><span class="line"><span class="variable">%_3</span> <span class="operator">=</span> <span class="keyword">call</span> <span class="type">i32</span> <span class="title">@getInt</span>()</span><br><span class="line"><span class="variable">%_5</span> <span class="operator">=</span> <span class="keyword">call</span> <span class="type">i32</span> <span class="title">@getInt</span>()</span><br><span class="line"><span class="variable">%_7</span> <span class="operator">=</span> <span class="keyword">call</span> <span class="type">i32</span> <span class="title">@getInt</span>()</span><br><span class="line"><span class="keyword">br</span> label <span class="variable">%for.cond_0</span></span><br><span class="line"></span><br><span class="line">for.cond_<span class="number">0</span>:</span><br><span class="line"><span class="variable">%sum_phi_0</span> <span class="operator">=</span> <span class="keyword">phi</span> <span class="type">i32</span> [ <span class="variable">%add_1</span><span class="punctuation">,</span> <span class="variable">%for.inc_0</span> ]<span class="punctuation">,</span> [ <span class="number">0</span><span class="punctuation">,</span> <span class="variable">%enter_main_0</span> ]</span><br><span class="line"><span class="variable">%i_phi_0</span> <span class="operator">=</span> <span class="keyword">phi</span> <span class="type">i32</span> [ <span class="variable">%inc_0</span><span class="punctuation">,</span> <span class="variable">%for.inc_0</span> ]<span class="punctuation">,</span> [ <span class="number">0</span><span class="punctuation">,</span> <span class="variable">%enter_main_0</span> ]</span><br><span class="line"><span class="variable">%slt_0</span> <span class="operator">=</span> <span class="keyword">icmp</span> <span class="keyword">slt</span> <span class="type">i32</span> <span class="variable">%i_phi_0</span><span class="punctuation">,</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">br</span> <span class="type">i1</span> <span class="variable">%slt_0</span><span class="punctuation">,</span> label <span class="variable">%for.body_0</span><span class="punctuation">,</span> label <span class="variable">%for.end_0</span></span><br><span class="line"></span><br><span class="line">for.inc_<span class="number">0</span>:</span><br><span class="line"><span class="variable">%inc_0</span> <span class="operator">=</span> <span class="keyword">add</span> <span class="type">i32</span> <span class="variable">%i_phi_0</span><span class="punctuation">,</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">br</span> label <span class="variable">%for.cond_0</span></span><br><span class="line"></span><br><span class="line">for.body_<span class="number">0</span>:</span><br><span class="line"><span class="variable">%mul_0</span> <span class="operator">=</span> <span class="keyword">mul</span> <span class="type">i32</span> <span class="number">4</span><span class="punctuation">,</span> <span class="variable">%i_phi_0</span></span><br><span class="line"><span class="variable">%add_0</span> <span class="operator">=</span> <span class="keyword">add</span> <span class="type">i32</span> <span class="variable">%mul_0</span><span class="punctuation">,</span> <span class="number">2</span></span><br><span class="line"><span class="variable">%add_1</span> <span class="operator">=</span> <span class="keyword">add</span> <span class="type">i32</span> <span class="variable">%sum_phi_0</span><span class="punctuation">,</span> <span class="variable">%add_0</span></span><br><span class="line"><span class="keyword">br</span> label <span class="variable">%for.inc_0</span></span><br><span class="line"></span><br><span class="line">for.end_<span class="number">0</span>:</span><br><span class="line"><span class="keyword">call</span> void <span class="title">@printlnInt</span>(<span class="type">i32</span> <span class="variable">%sum_phi_0</span>)</span><br><span class="line"><span class="keyword">br</span> label <span class="variable">%exit_main_0</span></span><br><span class="line"></span><br><span class="line">exit_main_<span class="number">0</span>:</span><br><span class="line"><span class="keyword">ret</span> <span class="type">i32</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过优化的话，我们会得到：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dick</span><br></pre></td></tr></table></figure><p>其中一个来源是它在循环前的初始值，另一个来源是它在循环中累加的过程</p><p>归纳变量变形的优化主要分为这么几步：第一，我们要从像 $i$ 这样的基础归纳变量 (basic induction variable) 开始发现导出归纳变量 (derived induction variable)，接着通过强度削弱 (strength reduction) 把原来的乘法变为加法。</p><h3 id="3-1-发现基本归纳变量"><a href="#3-1-发现基本归纳变量" class="headerlink" title="3.1 发现基本归纳变量"></a>3.1 发现基本归纳变量</h3><p>正如之前所说，如果在循环 $L$ 中，变量 $i$ 只有一个 $i \leftarrow i +c$ 的定值，其中 $c$ 是一个循环不变量，那么 $i$ 就是循环 $L$ 的基本归纳变量。</p><p>由于 llvm 是 SSA 的，我们可以注意到这样的 $i$ 的定值一定具有这样的形式：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">%i_phi_0</span> <span class="operator">=</span> <span class="keyword">phi</span> <span class="type">i32</span> [ <span class="variable">%inc_0</span><span class="punctuation">,</span> <span class="variable">%for.inc_0</span> ]<span class="punctuation">,</span> [ <span class="number">0</span><span class="punctuation">,</span> <span class="variable">%enter_main_0</span> ]</span><br><span class="line"><span class="variable">%inc_0</span> <span class="operator">=</span> <span class="keyword">add</span> <span class="type">i32</span> <span class="variable">%i_phi_0</span><span class="punctuation">,</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这样的话，我们只需要找到循环头节点中所有的 $\phi$ 指令，考察其是否有两个分支，且其中一个在循环外，另一个再循环内且是循环外的那个来源加上一个循环不变量即可。</p><h3 id="3-2-发现导出归纳变量"><a href="#3-2-发现导出归纳变量" class="headerlink" title="3.2 发现导出归纳变量"></a>3.2 发现导出归纳变量</h3>]]></content>
      
      
      <categories>
          
          <category> Course-Related </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Compiler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell script notes</title>
      <link href="/2024/01/21/shell-script-notes/"/>
      <url>/2024/01/21/shell-script-notes/</url>
      
        <content type="html"><![CDATA[<h1 id="Lec-02-Shell-as-a-script-and-a-tool"><a href="#Lec-02-Shell-as-a-script-and-a-tool" class="headerlink" title="Lec 02: Shell as a script and a tool"></a>Lec 02: Shell as a script and a tool</h1><h2 id="0-概览"><a href="#0-概览" class="headerlink" title="0. 概览"></a>0. 概览</h2><p>shell 脚本是一种比较复杂的工具，可以用来优化创建命令&#x2F;执行&#x2F;读取的过程。这样比对应 c++ 程序要简单&#x2F;高效得多。</p><h2 id="1-Shell-脚本"><a href="#1-Shell-脚本" class="headerlink" title="1. Shell 脚本"></a>1. Shell 脚本</h2><h3 id="1-1-变量"><a href="#1-1-变量" class="headerlink" title="1.1 变量"></a>1.1 变量</h3><p>如果要给变量赋值，我们可以使用 <code>foo=bar</code>，如果要访问变量的值，我们要使用 <code>$foo</code> 来访问。</p><p>值得注意的是，用 ‘ 和 “ 包括字符串的意义并不相同。前者不会转义，后者则会转义。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo=bar</span><br><span class="line">echo &quot;$foo&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印 bar</span></span><br><span class="line">echo &#x27;$foo&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印 <span class="variable">$foo</span></span></span><br></pre></td></tr></table></figure><h2 id="1-2-脚本"><a href="#1-2-脚本" class="headerlink" title="1.2 脚本"></a>1.2 脚本</h2><p>举个例子，如果我希望评测 <code>code.cpp</code> 中的代码，就可以这样写一个 judge 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">g++ code.cpp -o code</span><br><span class="line">./code &lt; 1.in &gt; 1.out</span><br><span class="line">diff -qZB 1.out 1.ans</span><br></pre></td></tr></table></figure><p>第一行是为了告诉系统这是一个 bash 脚本，这样系统就会依次执行后面的代码。</p><p>下面我们写一个跑很多测试点的脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for i in $(seq 1 10); do</span><br><span class="line">  if ./code &lt; $i.in &gt; $i.out; then</span><br><span class="line">    diff -qZB $i.&#123;out.ans&#125;</span><br><span class="line">  else</span><br><span class="line">    echo &quot;RE for testpoint $i&quot;</span><br><span class="line">  fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="1-3-参数"><a href="#1-3-参数" class="headerlink" title="1.3 参数"></a>1.3 参数</h3><p>bash 有很多特殊的变量来表示参数、错误代码和相关变量。下面是一些例子：</p><ul><li><code>$0</code>-脚本名称</li><li><code>$1</code>-脚本的第一个参数</li><li><code>$@</code>-脚本的所有参数</li><li><code>$#</code>-参数个数</li><li><code>$$</code>-当前进程识别码</li><li><code>$?</code>-前一条指令的返回值</li><li><code>!!</code>-完整的上一条指令</li></ul><p>所有的非 0 返回值都代表运行时有错误，例如程序 <code>false</code>。</p><h3 id="1-4-替换"><a href="#1-4-替换" class="headerlink" title="1.4 替换"></a>1.4 替换</h3><p>另一个常见的模式是以变量的形式获取一个命令的输出，这可以通过 命令替换（command substitution）实现。</p><p>当您通过 <code>$( CMD )</code> 这样的方式来执行 CMD 这个命令时，它的输出结果会替换掉 <code>$( CMD )</code> 。</p><p>例如，如果执行 <code>for file in $(ls)</code> ，shell 首先将调用 <code>ls</code> ，然后遍历得到的这些返回值。</p><p>还有一个冷门的类似特性是 进程替换（process substitution）， <code>&lt;( CMD )</code> 会执行 CMD 并将结果输出到一个临时文件中，并将 <code>&lt;( CMD )</code> 替换成临时文件名。这在我们希望返回值通过文件而不是STDIN传递时很有用。例如， <code>diff &lt;(ls foo) &lt;(ls bar)</code> 会显示文件夹 foo 和 bar 中文件的区别。</p><h2 id="1-5-综合的例子"><a href="#1-5-综合的例子" class="headerlink" title="1.5 综合的例子"></a>1.5 综合的例子</h2><p>这段脚本会遍历我们提供的参数，使用 <code>grep</code> 搜索字符串 <code>foobar</code>，如果没有找到，则将其作为注释追加到文件中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;Starting program at $(date)&quot; # date会被替换成日期和时间</span><br><span class="line"></span><br><span class="line">echo &quot;Running program $0 with $# arguments with pid $$&quot;</span><br><span class="line"></span><br><span class="line">for file in &quot;$@&quot;; do</span><br><span class="line">    grep foobar &quot;$file&quot; &gt; /dev/null 2&gt; /dev/null</span><br><span class="line">    # 如果模式没有找到，则grep退出状态为 1</span><br><span class="line">    # 我们将标准输出流和标准错误流重定向到Null，因为我们并不关心这些信息</span><br><span class="line">    if [[ $? -ne 0 ]]; then</span><br><span class="line">        echo &quot;File $file does not have any foobar, adding one&quot;</span><br><span class="line">        echo &quot;# foobar&quot; &gt;&gt; &quot;$file&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>感觉还是容易看懂的。需要注意的事情是比较操作最好用 <code>[[]]</code> 包括，这样会降低犯错的几率。</p><h3 id="1-6-glob"><a href="#1-6-glob" class="headerlink" title="1.6 glob"></a>1.6 glob</h3><p>bash 允许我们基于文件拓展名展开表达式。</p><ul><li>例如我可以用 <code>rm test/*.v</code> 来删除 test 目录下的所有 verilog 源文件 </li><li>又比如我可以通过 <code>&#123;&#125;</code> 来展示一些有公共子串的输入</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">convert image.&#123;png,jpg&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">会展开为</span></span><br><span class="line">convert image.png image.jpg</span><br><span class="line"></span><br><span class="line">cp /path/to/project/&#123;foo,bar,baz&#125;.sh /newpath</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">会展开为</span></span><br><span class="line">cp /path/to/project/foo.sh /path/to/project/bar.sh /path/to/project/baz.sh /newpath</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以结合通配使用</span></span><br><span class="line">mv *&#123;.py,.sh&#125; folder</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">会移动所有 *.py 和 *.sh 文件</span></span><br><span class="line"></span><br><span class="line">mkdir foo bar</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面命令会创建foo/a, foo/b, ... foo/h, bar/a, bar/b, ... bar/h这些文件</span></span><br><span class="line">touch &#123;foo,bar&#125;/&#123;a..h&#125;</span><br><span class="line">touch foo/x bar/y</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比较文件夹 foo 和 bar 中包含文件的不同</span></span><br><span class="line">diff &lt;(ls foo) &lt;(ls bar)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt; x</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">---</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt; y</span></span><br></pre></td></tr></table></figure><h2 id="2-Shell-作为一种工具"><a href="#2-Shell-作为一种工具" class="headerlink" title="2. Shell 作为一种工具"></a>2. Shell 作为一种工具</h2><h3 id="2-1-查找文件"><a href="#2-1-查找文件" class="headerlink" title="2.1 查找文件"></a>2.1 查找文件</h3><p>find 是一种绝佳的查找工具（但是很慢）。它会递归地搜索符合条件的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找所有名称为src的文件夹</span></span><br><span class="line">find . -name src -type d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找所有文件夹路径中包含<span class="built_in">test</span>的python文件</span></span><br><span class="line">find . -path &#x27;*/test/*.py&#x27; -type f</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找前一天修改的所有文件</span></span><br><span class="line">find . -mtime -1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找所有大小在500k至10M的tar.gz文件</span></span><br><span class="line">find . -size +500k -size -10M -name &#x27;*.tar.gz&#x27;</span><br></pre></td></tr></table></figure><p>除了单纯的查找，我们还能对查找到的文件进行操作。这是通过 <code>-exec</code> 简述实现的。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 删除全部扩展名为.tmp 的文件</span><br><span class="line">find . -name &#x27;*.tmp&#x27; -exec rm &#123;&#125; \;</span><br><span class="line"># 查找全部的 PNG 文件并将其转换为 JPG</span><br><span class="line">find . -name &#x27;*.png&#x27; -exec convert &#123;&#125; &#123;&#125;.jpg \;</span><br></pre></td></tr></table></figure><h3 id="2-2-查找代码"><a href="#2-2-查找代码" class="headerlink" title="2.2 查找代码"></a>2.2 查找代码</h3><p><code>grep</code> 指令是一个非常好的工具。其中有很多有用的参数：</p><ul><li><code>-C</code>: 获取查找结果的上下午，例如 <code>grep -C 10</code> 就是显示上下十行</li><li><code>-v</code> 选出不匹配的结果</li><li><code>-R</code> 递归进行子目录</li></ul><p>它也有一些替代品，例如 <code>rg</code>，你可以通过 <code>sudo apt install ripgrep</code> 来安装之。下面是一些使用的例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">brucelee@invo1ution:~/Interest/Missing-Semester/2-Shell_script$ rg -t md &quot;#&quot; // 查找所有用了 &#x27;#&#x27; 的 .md 文件</span><br><span class="line">shell_script_notes.md</span><br><span class="line">1:# Lec 02: Shell as a script and a tool</span><br><span class="line">3:## 0. 概览</span><br><span class="line">6:## 1. Shell 脚本</span><br><span class="line">brucelee@invo1ution:~/Interest/Missing-Semester$ rg Denny -A 1 // 查找所有含有 &quot;Denny&quot; 的文本，并输出上下一行</span><br><span class="line">1-Shell/shell_notes.md</span><br><span class="line">14:如果要传参数的话，我们可以使用单引号/双引号将其包括，也可以使用转移符号进行处理。比方说我要创建一个叫 &quot;Denny Qi&quot; 的文件夹，就可以写：</span><br><span class="line">15-</span><br><span class="line">--</span><br><span class="line">17:invo1lution: mkdir Denny\ Qi</span><br><span class="line">18-```</span><br><span class="line">brucelee@invo1ution:~/Interest/Missing-Semester$ rg --stats qweryy // 打印匹配 &quot;qweryy&quot; 的统计信息</span><br><span class="line">0 matches</span><br><span class="line">0 matched lines</span><br><span class="line">0 files contained matches</span><br><span class="line">4 files searched</span><br><span class="line">0 bytes printed</span><br><span class="line">11241 bytes searched</span><br><span class="line">0.000024 seconds spent searching</span><br><span class="line">0.005344 seconds</span><br></pre></td></tr></table></figure><h3 id="2-3-查找-shell-命令"><a href="#2-3-查找-shell-命令" class="headerlink" title="2.3 查找 shell 命令"></a>2.3 查找 shell 命令</h3><p>经典 <code>history | grep find</code>。这在编译器反复配 ravel 环境的时候帮了大忙。</p><p>同时，你也可以使用 <code>Ctrl + R</code> 来回溯，并输入字串进行匹配。</p><p>你可以修改 shell history 的行为，例如，如果在命令的开头加上一个空格，它就不会被加进 shell 记录中。当你输入包含密码或是其他敏感信息的命令时会用到这一特性。 为此你需要在 .bashrc 中添加 <code>HISTCONTROL=ignorespace</code> 或者向 .zshrc 添加 <code>setopt HIST_IGNORE_SPACE</code>。 如果你不小心忘了在前面加空格，可以通过编辑 .bash_history 或 .zhistory 来手动地从历史记录中移除那一项。</p><h3 id="2-4-文件夹导航"><a href="#2-4-文件夹导航" class="headerlink" title="2.4 文件夹导航"></a>2.4 文件夹导航</h3><p><a href="https://github.com/clvv/fasd">fasd</a> 工具可以帮助我们根据日常习惯来访问经常访问的目录。具体细节可以查看该仓库的 <code>README.md</code></p><h2 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h2><ol><li><a href="https://missing-semester-cn.github.io/2020/shell-tools/">MIT Missing-Semester Lec02</a></li><li><a href="https://acm.sjtu.edu.cn/wiki/Shell">ACM Class Wiki, shell</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Course-Related </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Missing-Semester </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell notes</title>
      <link href="/2024/01/21/shell-notes/"/>
      <url>/2024/01/21/shell-notes/</url>
      
        <content type="html"><![CDATA[<h1 id="Lec-01-Shell"><a href="#Lec-01-Shell" class="headerlink" title="Lec 01: Shell"></a>Lec 01: Shell</h1><h2 id="1-shell-的基本操作"><a href="#1-shell-的基本操作" class="headerlink" title="1. shell 的基本操作"></a>1. shell 的基本操作</h2><p>当你刚刚打开 Shell 的时候，你会发现这样一段提示符：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invo1lution:~$</span><br></pre></td></tr></table></figure><ul><li>~ 的意思是 home。</li><li>$ 的意思是目前的身份不是 root 用户。</li></ul><hr><p>如果要传参数的话，我们可以使用单引号&#x2F;双引号将其包括，也可以使用转移符号进行处理。比方说我要创建一个叫 “Denny Qi” 的文件夹，就可以写：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invo1lution: mkdir Denny\ Qi</span><br></pre></td></tr></table></figure><hr><p>类似于 <code>echo mkdir</code> 这样的指令都是一段 shell 可以解释执行的尖端代码。如果某个指令并不是 shell 了解的关键字，它会咨询<strong>环境变量</strong> <code>$PATH</code>。这里举一个例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">missing:~$ echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">missing:~$ which echo</span><br><span class="line">/bin/echo</span><br><span class="line">missing:~$ /bin/echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br></pre></td></tr></table></figure><h2 id="2-在-shell-中导航"><a href="#2-在-shell-中导航" class="headerlink" title="2. 在 shell 中导航"></a>2. 在 shell 中导航</h2><p>这个已经很熟悉了。你可以通过 <code>pwd</code> 来获取当前目录。</p><h3 id="2-1-ls"><a href="#2-1-ls" class="headerlink" title="2.1 ls"></a>2.1 ls</h3><p>关于 <code>ls</code>：</p><ol><li>你可以通过 <code>-l</code> 来显示详细信息</li><li>通过 <code>-h</code> 来用 K&#x2F;M&#x2F;G 等看得懂的单位表示文件大小。</li><li>你可以通过 <code>-a</code> 来显示以 . 开头的隐藏文件。</li></ol><p>合起来就是 <code>ls -lah</code>。<br>这里举一个 <code>ls -l</code> 的例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">missing:~$ ls -l /home</span><br><span class="line">drwxr-xr-x 1 missing  users  4096 Jun 15  2019 missing</span><br></pre></td></tr></table></figure><p>下面的九个字母分别代表<strong>文件所有者&#x2F;用户组&#x2F;其它所有人</strong> 的权限。如果你想进入某个文件夹，就需要具备它和它父文件夹的搜索权限，为了列出它，用户就需要对其有读权限。</p><h2 id="3-shell-的文本操作"><a href="#3-shell-的文本操作" class="headerlink" title="3. shell 的文本操作"></a>3. shell 的文本操作</h2><h3 id="3-1-cat"><a href="#3-1-cat" class="headerlink" title="3.1 cat"></a>3.1 cat</h3><p>你可以通过 <code>cat hello.cpp</code> 把文件里的东西输出到终端。</p><h3 id="3-2-echo"><a href="#3-2-echo" class="headerlink" title="3.2 echo"></a>3.2 echo</h3><p>你可以通过 <code>echo hi &gt; main.cpp</code> 来往文件里写东西</p><h3 id="3-3-Nano"><a href="#3-3-Nano" class="headerlink" title="3.3 Nano"></a>3.3 Nano</h3><p>关于 Nano，这里列出一些基本功能：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ nano hello.cpp</span><br><span class="line">  GNU nano <span class="number">6.4</span>                        hello.cpp                                 </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">                                [ 已读取 <span class="number">5</span> 行 ]</span><br><span class="line">^G 帮助      ^O 写入      ^W 搜索      ^K 剪切      ^T 执行命令  ^C 位置</span><br><span class="line">^X 离开      ^R 读档      ^\ 替换      ^U 粘贴      ^J 对齐      ^/ 跳行</span><br></pre></td></tr></table></figure><p>其中例如 ^X 的意思就是 Ctrl + X，而 Alt + X 就是 M-x。</p><h3 id="3-4-cp-mv"><a href="#3-4-cp-mv" class="headerlink" title="3.4 cp&#x2F;mv"></a>3.4 cp&#x2F;mv</h3><p>你可以通过 <code>cp src dest</code> 来把 src 挪到 dest 里面。如果 src 是一个目录，就需要 <code>-r</code> 来表示递归复制。</p><p>另外，你可以通过 <code>mv src dest</code> 来直接移动文件&#x2F;目录，而且**不需要<code>-r</code>**。</p><h2 id="4-程序间创造连接"><a href="#4-程序间创造连接" class="headerlink" title="4. 程序间创造连接"></a>4. 程序间创造连接</h2><h3 id="4-1-输入输出重定向"><a href="#4-1-输入输出重定向" class="headerlink" title="4.1 输入输出重定向"></a>4.1 输入输出重定向</h3><p>在 Linux 系统里，一个程序默认有三条输入输出的通道：</p><ul><li>通道 0 表示标准输入 (<code>stdin / std::cin</code>)</li><li>通道 1 表示标准输出 (<code>stdout / std::cout</code>)</li><li>通道 2 表示标准错误 (<code>stderr / std::cerr</code>)<br>在 shell 里，我们可以把这三个通道重定向到文件 (类似于 <code>freopen</code>)。例如，如果我们要从 <code>1.in</code> 里读数据，输出到 <code>1.out</code> 里，并把标准错误写到 <code>1.err</code> 里，可以这样：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./a.out &lt;1.<span class="keyword">in</span> &gt;1.out 2&gt;1.err</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">1.err</span><br><span class="line">1.in</span><br><span class="line">1.out</span><br><span class="line">a.out</span><br><span class="line">hello.cpp</span><br></pre></td></tr></table></figure><p>务必注意：如果一个被输出文件在执行命令前已经存在了，那么它会在程序执行前先被<strong>清空</strong>。如果你不想让它被清空，而是想让程序输出到文件末尾，可以用 <code>&gt;&gt;</code> 代替 <code>&gt;</code>。</p><p>有时候我们想要把 <code>stdout</code> 和 <code>stderr</code> 的内容都输出到同一个文件里，这时候可以用 <code>2&gt;&amp;1</code>：</p><h2 id="5-一个功能强大的工具"><a href="#5-一个功能强大的工具" class="headerlink" title="5. 一个功能强大的工具"></a>5. 一个功能强大的工具</h2><p>root 即根用户，它想干什么都可以。但是我们不能登录之，因为这样的话某些错误的操作可能直接毁掉系统。所以我们使用 <code>sudo</code> 指令取代之。</p><p>有一件事情是必须作为根用户才能做得，就是往 <code>sysfs</code> 文件（包含内核参数）中写入内容。你的系统的很多信息都挂载在 <code>/sys</code> 下。</p><p>例如，你的屏幕亮度就在 <code>/sys/class/backlight</code> 文件中。</p><p>这里有一个重点，看下面这个例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo find -L /sys/class/backlight -maxdepth 2 -name <span class="string">&#x27;*brightness*&#x27;</span></span></span><br><span class="line">/sys/class/backlight/thinkpad_screen/brightness</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /sys/class/backlight/thinkpad_screen</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">echo</span> 3 &gt; brightness</span></span><br><span class="line">An error occurred while redirecting file &#x27;brightness&#x27;</span><br><span class="line">open: Permission denied</span><br></pre></td></tr></table></figure><p>这是因为 <code>| &gt; &lt;</code> 是通过 shell 执行的，后者在设置 <code>echo sudo</code> 之前尝试打开 brightness，所以失败了。</p><p>你可以使用 <code>$ echo 3 | sudo tee brightness</code> 作为替代。</p><h2 id="6-后台运行"><a href="#6-后台运行" class="headerlink" title="6. 后台运行"></a>6. 后台运行</h2><p>如果我们想同时在一个终端里运行多个指令，就可以用后台运行模式启动命令。只要在想运行的指令后面加一个 &amp; 就行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./a.out &amp;</span></span><br><span class="line">[1] 64661</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><p>有的时候我们开着一个程序，但希望切到另一个程序。这时候可以先用 <code>Ctrl+Z</code> 把程序暂停运行。如果你想回到原来的程序，可以使用 <code>fg</code> 命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3</span></span><br><span class="line">Python 3.10.6 (main, Aug  3 2022, 17:39:45) [GCC 12.1.1 20220730] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Ctrl+Z</span></span><br><span class="line">[1]+  已停止               python3</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> data</span></span><br><span class="line">123 4566 7788</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">fg</span></span></span><br><span class="line">python3</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 123 + 4566 + 7788</span></span><br><span class="line">12477</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span> </span><br></pre></td></tr></table></figure><h2 id="7-一些工具命令"><a href="#7-一些工具命令" class="headerlink" title="7. 一些工具命令"></a>7. 一些工具命令</h2><p>一些工具命令</p><ul><li><code>seq 起始 终止</code>：打印出起始到终止的所有整数（闭区间）。</li><li><code>sort</code>: 对输入以行为单位排序。</li><li><code>sed &#39;s/查找内容/替换内容/g&#39;</code> ：将输入里的所有查找内容替换为替换内容。</li><li><code>grep 查找内容</code>：在输入里查找查找内容。</li><li><code>which 命令</code>：输出命令的绝对路径。whereis 也有类似的功能。</li><li><code>ps</code>：输出这个终端里正在执行的程序（包含 shell 和 ps 本身）。</li><li><code>kill 进程编号、killall 程序名称</code>：发出信号让对应进程终止。</li><li><code>kill -9 进程编号、killall 程序名称</code>：发出信号让对应进程强行立即终止。</li></ul><h2 id="8-参考资料"><a href="#8-参考资料" class="headerlink" title="8. 参考资料"></a>8. 参考资料</h2><ol><li><a href="https://missing-semester-cn.github.io/2020/course-shell/">MIT Missing-Semester Lec01</a></li><li><a href="https://acm.sjtu.edu.cn/wiki/Shell">ACM Class Wiki, shell</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Course-Related </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Missing-Semester </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
